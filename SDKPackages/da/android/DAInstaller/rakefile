#-------------------------------------------------------------------------------
# Licensed Materials - Property of IBM
# (C) Copyright IBM Corp. 2017
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#-------------------------------------------------------------------------------

require_relative 'JsonUtil'
require 'rexml/document'
require 'yaml'
include REXML

task :default => 'da:all'

namespace :da do

  $config = YAML.load(File.open("settings.yml"))

  desc "Run thru all the steps for integration"
  task :all => [:validateParameters, :updateAssetsLibs, :fixGradle, :updateManifest, :updateApplicationFile] do
    puts "Completed installing tealeaf into Android project."
  end

  desc "Validate parameters on command line"
  task :validateParameters do
    $modulePath = ENV['modulePath']
    $postMessageUrl = ENV['postMessageUrl']
    $clientId = ENV['clientId']
    $appName = ENV['appName']

    if $modulePath.nil?
      raise ArgumentError, "Missing required argument modulePath, example modulePath=\"....\""
    end

    if !(File.directory?($modulePath))
      raise ArgumentError, "modulePath directory for #{modulePath} does not exist."
    end

    if $postMessageUrl.nil?
      raise ArgumentError, "Missing required argument postMessageUrl, example postMessageUrl=\"http....\""
    end

    if $clientId.nil?
      raise ArgumentError, "Missing required argument clientId, example clientId=\"300....\""
    end

    if $appName.nil?
      raise ArgumentError, "Missing required argument appName, example appName=\"TestApp....\""
    end

    $manifestFile = $modulePath + $config["manifestFilePath"]
    $assetDirectory = $modulePath + $config["assetDirectoryPath"]
    $libsDirectory = $modulePath + $config["libsDirectoryPath"]

    puts "Starting to install tealeaf into Android project located at #{$modulePath} which currently only supports standard Android Studio modules."
  end

  desc "Copy over items to assets and libs directory"
  task :updateAssetsLibs do
    # Check that there is an assets folder
    createDirectory($assetDirectory)
    # Check that there is an libs folder
    createDirectory($libsDirectory)

    # Copy over items to assets directory
    FileUtils.cp_r $config["eocoreJarPath"], $libsDirectory, remove_destination: true
    FileUtils.cp_r $config["eocoreEOCoreBasicConfigPath"], $assetDirectory, remove_destination: true
    FileUtils.cp_r $config["eocoreEOCoreAdvancedConfigPath"], $assetDirectory, remove_destination: true
    FileUtils.cp_r $config["dAModJarPath"], $libsDirectory, remove_destination: true
    FileUtils.cp_r $config["dABasicConfigPath"], $assetDirectory, remove_destination: true
    FileUtils.cp_r $config["dAAdvancedConfigPath"], $assetDirectory, remove_destination: true

    # Read in gradle and convert to an array
    dAModBasicConfigPath = $assetDirectory + "/DigitalAnalyticsBasicConfig.properties"
    contents = File.readlines(dAModBasicConfigPath)

    postMessageIndex = getIndexOfRegExp(contents, /PostMessageUrl=/)
    contents[postMessageIndex] = "PostMessageUrl=" + $postMessageUrl
    clientIdIndex = getIndexOfRegExp(contents, /ClientId=/)
    contents[clientIdIndex] = "ClientId=" + $clientId
    appNameIndex = getIndexOfRegExp(contents, /AppName=/)
    contents[appNameIndex] = "AppName=" + $appName

    # Save changes
    File.open(dAModBasicConfigPath, "w") {|file| file.puts contents }

    puts "Copied over items to assets and libs directory"
  end

  desc "Update Gradle settings"
  task :fixGradle do
    # Add libraries to the dependencies section in gradle
    $gradleFile = $modulePath + "/build.gradle"
    
    # Read in gradle and convert to an array
    contents = File.readlines($gradleFile)
    dependenciesStartIndex = getIndexOfRegExp(contents, /\Adependencies\s{/)

    # Sub dependencies array
    dependenciesArray = contents.slice(dependenciesStartIndex + 1,contents.length)

    dependenciesEndIndex = getIndexOfRegExp(dependenciesArray, /.?}.?/)

    # Adjust end index value
    dependenciesEndIndex = dependenciesStartIndex + dependenciesEndIndex + 1
    # Create dependencies array
    dependenciesArray = contents.slice(dependenciesStartIndex,dependenciesEndIndex)

    # Check dependencies section
    dependenciesEocoreIndex = getIndexOfRegExp(dependenciesArray, /compile\s?files\('libs\/eocore.jar'\)/)
    dependenciesDAmodIndex = getIndexOfRegExp(dependenciesArray, /compile\s?files\('libs\/DigitalAnalyticsMod.jar'\)/)

    # Insert values if needed
    insertValueToArrayIfNil(dependenciesEocoreIndex, $config["dependenciesEocore"], dependenciesEndIndex - 1, contents)
    insertValueToArrayIfNil(dependenciesDAmodIndex, $config["dependenciesDAmod"], dependenciesEndIndex - 1, contents)

    # Save changes
    File.open($gradleFile, "w") {|file| file.puts contents }

    puts "Updated gradle file located at #{$gradleFile}"
  end

  desc "Update manifest file"
  task :updateManifest do
    # Read in manifest file from Android application
    contents = File.readlines($manifestFile)

    # Check dependencies section
    accessNetworkStateIndex = getIndexOfRegExp(contents, /uses-permission\s?android:name=\"android.permission.ACCESS_NETWORK_STATE\"/)
    accessWifiStateIndex = getIndexOfRegExp(contents, /uses-permission\s?android:name=\"android.permission.ACCESS_WIFI_STATE\"/)
    internetIndex = getIndexOfRegExp(contents, /uses-permission\s?android:name=\"android.permission.INTERNET\"/)
    usesPermissionIndex = getIndexOfRegExp(contents, /uses-permission/)
    applicationIndex = getIndexOfRegExp(contents, /<application/)
    
    if (usesPermissionIndex == -1)
      usesPermissionIndex = applicationIndex
    end

    insertValueToArrayIfNil(accessNetworkStateIndex, getSpacedText($config["permissionAccessNetworkState"]), usesPermissionIndex, contents)
    insertValueToArrayIfNil(accessWifiStateIndex, getSpacedText($config["permissionAccessWIFIState"]), usesPermissionIndex, contents)
    insertValueToArrayIfNil(internetIndex, getSpacedText($config["permissionInternet"]), usesPermissionIndex, contents)

    # Save changes
    File.open($manifestFile, "w") {|file| file.puts contents }

    puts "Updated manifest file located at #{$manifestFile}"
  end

  desc "Update application file"
  task :updateApplicationFile do
    # Read in manifest file from Android application
    contents = File.readlines($manifestFile)

    # Check application section
    applicationStartIndex = getIndexOfRegExp(contents, /<application/)

    # Sub application array
    applicationArray = contents.slice(applicationStartIndex + 1, contents.length)
    applicationEndIndex = getIndexOfRegExp(applicationArray, /\s?<activity/)

    # Create application section array
    applicationSectionArray = contents.slice(applicationStartIndex, applicationEndIndex)

    # Check application section
    applicationNameIndex = getIndexOfRegExp(applicationSectionArray, /\s?android:name/)

    # Get application file name if found
    if applicationNameIndex > -1
      applicationName = applicationSectionArray[applicationNameIndex]
      applicationName = applicationName.gsub(/\s?android:name\s?=\s?\"/, "")
      applicationName = applicationName.gsub(/\s?\"\s?>?/, "")
      applicationName = applicationName.gsub(/\s+/, "")
      applicationName = getClassName(applicationName)

      applicationFilePath = getFilePath(applicationName)

      importDigitalanalytics = $config["importDigitalanalytics"]

      # Read in the application class
      applicationContents =  File.readlines(applicationFilePath)
      importDigitalanalyticsIndex = getIndexOfRegExp(applicationContents, /\s?import\s?com.digitalanalytics.api.DigitalAnalytics;\s?/)
      lastImportIndex = getLastIndexOfRegExp(applicationContents, /\s?import\s?/)
      onCreateIndex = getIndexOfRegExp(applicationContents, /void\s?onCreate\s?\(/)
      onTerminateIndex = getIndexOfRegExp(applicationContents, /void\s?onTerminate\s?\(/)
      lastBracketIndex = getIndexOfRegExp(applicationContents, /\}/)

      insertValueToArrayIfNil(importDigitalanalyticsIndex, $config["importDigitalanalytics"], lastImportIndex, applicationContents)

      if importDigitalanalyticsIndex == -1
        lastBracketIndex += 1
      end

      insertValueToArrayIfNil(onTerminateIndex, getSpacedText($config["onTerminateSnippet"]), lastBracketIndex, applicationContents)
      insertValueToArrayIfNil(onCreateIndex, getSpacedText($config["onCreateSnippet"]), lastBracketIndex, applicationContents)

      # Save changes
      File.open(applicationFilePath, "w") {|file| file.puts applicationContents }
      puts "Updated application file located at #{applicationFilePath}"
    else
      # Check application section
      activityStartIndex = getIndexOfRegExp(contents, /\s?<activity/)

      # Sub application array
      activityArray = contents.slice(activityStartIndex + 1, contents.length)
      activityEndIndex = getIndexOfRegExp(activityArray, /\s?<\/activity>/)

      # Create application section array
      activitySectionArray = contents.slice(activityStartIndex, activityEndIndex)

      # Check application section
      activityNameIndex = getIndexOfRegExp(activitySectionArray, /\s?android:name/)

      # Get name of the start activity
      activityName = activitySectionArray[activityNameIndex]
      puts activityName
      activityName = activityName.gsub(/<activity\s?/, "")
      activityName = activityName.gsub(/\s?android:name\s?=\s?\"/, "")
      activityName = activityName.gsub(/\s?\"\s?>?/, "")
      activityName = activityName.gsub(/\s+/, "")
      activityName = getClassName(activityName)
      puts "Activity file in manifest:" + activityName

      activityFilePath = getFilePath(activityName)
      if activityFilePath != ""
        # Read in the activity class
        puts "Read in activity file at:" + activityFilePath
        activityContents =  File.readlines(activityFilePath)

        importDigitalanalyticsIndex = getIndexOfRegExp(activityContents, /(\s?import\s?com.digitalanalytics.api.DigitalAnalytics;\s?)|(\s?import\s?com.digitalanalytics.api.\*;\s?)/)
        firstImportIndex = getIndexOfRegExp(activityContents, /\s?import\s?/)
        startupInstanceIndex = getIndexOfRegExp(activityContents, /\s?DigitalAnalytics.startup\(/)
        lastBracketIndex = getIndexOfRegExp(activityContents, /super.onCreate\(/)

        insertValueToArrayIfNil(importDigitalanalyticsIndex, "", firstImportIndex, activityContents)
        insertValueToArrayIfNil(importDigitalanalyticsIndex, $config["importDigitalanalytics"], firstImportIndex, activityContents)

        if importDigitalanalyticsIndex > -1
          lastBracketIndex = lastBracketIndex + 1
        else
          lastBracketIndex = lastBracketIndex + 3
        end

        insertValueToArrayIfNil(startupInstanceIndex, getSpacedText($config["daInstance"]), lastBracketIndex, activityContents)

        # Save changes
        File.open(activityFilePath, "w") {|file| file.puts activityContents }
        puts "Updated activity file located at #{activityFilePath}"
      end
    end
  end

  def getClassName(className)
     classNameArray = className.split(".")
     return classNameArray[classNameArray.length - 1]
  end

  def createDirectory(directory)
    #puts directory
    if !(File.directory?(directory))
      Dir.mkdir(directory)
    end
  end

  def getIndexOfRegExp(testArray, regExp)
    index = 0
    while index < testArray.length
      #puts (index).to_s + ":" + testArray[index]
      if (regExp.match(testArray[index]))
        return index
      end
      index += 1
    end
    return -1  
  end

  def getLastIndexOfRegExp(testArray, regExp)
    index = testArray.length - 1
    while index > 0
      if (regExp.match(testArray[index]))
        return index + 1
      end
      index -= 1
    end
    return -1  
  end

  def insertValueToArrayIfNil(indexToTest, insertText, indexToInsert, arrayToBeUpdated)
    if (indexToTest == -1)
      arrayToBeUpdated.insert(indexToInsert, insertText)
    end
  end

  def getFilePath(fileName)
    filePath = ""
    puts "Look for file " + fileName + " in directory " + $modulePath
    # Fix file path for windows to unix
    Dir.glob($modulePath.gsub('\\','/') + "/**/" + fileName + ".java").each do|f| 
        filePath = f
    end
    if filePath == ""
      puts "File: " + fileName + " not found"
    end
    return filePath
  end

  def getSpacedText(text)
    return getSpacedTextHelper(text, $config["spaces"])
  end

  def getSpacedTextHelper(text, amountOfSpaces)
    if text.nil?
      return text
    end

    spaces = getSpacesText(amountOfSpaces)

    textArray = text.split(/\n/)
    index = 0
    while index < textArray.length
      textArray[index] = spaces + textArray[index]
      index += 1
    end
    return textArray
  end

  def getSpacesText(amountOfSpaces)
    spaces = ""  
    index = 0
    while index < amountOfSpaces
      spaces = spaces + " "
      index += 1
    end
    return spaces
  end
end